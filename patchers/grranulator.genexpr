// functions
initWindow(window)
{
	History isIinitialized;

	if (!isIinitialized) {
		len = dim(window);

		// iteration
		for (i = 0; i < len; i += 1) {
			tmp = i / len;
			poke(window, 0.42 - 0.5*cos(TWOPI * tmp) + 0.08*cos(TWOPI*2* tmp), i); // write sample in buffer
		}
	}
	isIinitialized = 1;
	return isIinitialized; 
}

calculateSample(inputLeft, inputRight, window, playing, position, speed, waiting, pan, size)
{
	window_len = dim(window);
	playingCount = 0;
	sampLeft = 0;
	sampRight = 0;
	pos = 0;
	
	for (i = 0; i < size; i += 1) {
		isPlaying = peek(playing, i);
		if (isPlaying) {
			playingCount += 1;
		}
	}

	for (i = 0; i < size; i += 1) {
		isPlaying = peek(playing, i);
		timeToWait = peek(waiting, i);

		// start playing this thing
		if (!isPlaying && timeToWait <= 0 && playingCount < 3) {
			poke(playing, 1, i);	// store that we are playing this instance
			pos = 0;
			timeToWait = window_len + SAMPLERATE * (noise()+1) * 4;
			poke(waiting, timeToWait, i);	// calculate random extra time to wait
			normRand = (noise() + 1) * 0.5;
			speedRatio = normRand * normRand + 0.1;
			panRatio = normRand;
			sampLeft += inputLeft * getValueForPosition(window, pos / window_len) * panRatio;
			sampRight += inputRight * getValueForPosition(window, pos / window_len) * (1.0 - panRatio);
			pos += speedRatio;
			poke(position, pos, i);
			poke(speed, speedRatio, i);
			poke(pan, panRatio, i);
			playingCount += 1;
		} else if (isPlaying) {	// playing this instance
			playingCount += 1;
			pos = peek(position, i);
			panRatio = peek(pan, i);
			sampLeft += inputLeft * getValueForPosition(window, pos / window_len) * panRatio;
			sampRight += inputRight * getValueForPosition(window, pos / window_len) * (1.0 - panRatio);
			pos += peek(speed, i);
			poke(position, pos, i);
			if (pos >= window_len) {
				poke(playing, 0, i); // we are no longer playing
			}
		}

		poke(waiting, max(timeToWait - 1, 0), i);
	}
	
	return sampLeft, sampRight;
}


getValueForPosition(wind, pos) {
	return cycle(wind, pos, index="phase");
}
